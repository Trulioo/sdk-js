/**
 * Trulioo JavaScript SDK
 *
 * Package version: 1.0.2
 * Trulioo OpenAPI version: v1
 * Generated by OpenAPI Generator version: 5.0.1
 */

import ApiClient from "../ApiClient";
import BusinessSearchRequest from '../model/BusinessSearchRequest';
import BusinessSearchResponse from '../model/BusinessSearchResponse';

/**
* Business service.
* @module api/BusinessApi
* @version v1
*/
export default class BusinessApi {

    /**
    * Constructs a new BusinessApi. 
    * @alias module:api/BusinessApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Get Business Search Result
     * returns the a business search result.
     * @param {String} mode trial or live
     * @param {String} id transaction record id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BusinessSearchResponse} and HTTP response
     */
    getBusinessSearchResultWithHttpInfo(mode, id) {
      let postBody = null;
      // verify the required parameter 'mode' is set
      if (mode === undefined || mode === null) {
        throw new Error("Missing the required parameter 'mode' when calling getBusinessSearchResult");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getBusinessSearchResult");
      }

      let pathParams = {
        'mode': mode,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = BusinessSearchResponse;
      return this.apiClient.callApi(
        '/{mode}/business/v1/search/transactionrecord/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Business Search Result
     * returns the a business search result.
     * @param {String} mode trial or live
     * @param {String} id transaction record id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BusinessSearchResponse}
     */
    getBusinessSearchResult(mode, id) {
      return this.getBusinessSearchResultWithHttpInfo(mode, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Search
     * Calling this method will perform a business search.
     * @param {String} mode trial or live
     * @param {module:model/BusinessSearchRequest} businessSearchRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BusinessSearchResponse} and HTTP response
     */
    searchWithHttpInfo(mode, businessSearchRequest) {
      let postBody = businessSearchRequest;
      // verify the required parameter 'mode' is set
      if (mode === undefined || mode === null) {
        throw new Error("Missing the required parameter 'mode' when calling search");
      }
      // verify the required parameter 'businessSearchRequest' is set
      if (businessSearchRequest === undefined || businessSearchRequest === null) {
        throw new Error("Missing the required parameter 'businessSearchRequest' when calling search");
      }

      let pathParams = {
        'mode': mode
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = ['application/json', 'text/json'];
      let returnType = BusinessSearchResponse;
      return this.apiClient.callApi(
        '/{mode}/business/v1/search', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Search
     * Calling this method will perform a business search.
     * @param {String} mode trial or live
     * @param {module:model/BusinessSearchRequest} businessSearchRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BusinessSearchResponse}
     */
    search(mode, businessSearchRequest) {
      return this.searchWithHttpInfo(mode, businessSearchRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
