/**
 * Trulioo JavaScript SDK
 *
 * Package version: 1.0.3
 * Trulioo OpenAPI version: v1
 * Generated by OpenAPI Generator version: 5.0.1
 */

import ApiClient from "../ApiClient";
import BusinessRegistrationNumber from '../model/BusinessRegistrationNumber';
import Consent from '../model/Consent';
import CountrySubdivision from '../model/CountrySubdivision';
import NormalizedDatasourceGroupCountry from '../model/NormalizedDatasourceGroupCountry';
import TestEntityDataFields from '../model/TestEntityDataFields';

/**
* Configuration service.
* @module api/ConfigurationApi
* @version v1
*/
export default class ConfigurationApi {

    /**
    * Constructs a new ConfigurationApi. 
    * @alias module:api/ConfigurationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Get Business Registration Numbers
     * Gets the currently configured business registration numbers, for country and an optionally supplied jurisdiction
     * @param {String} mode trial or live
     * @param {String} countryCode Country alpha2 code, get via the call to https://developer.trulioo.com/reference#getcountrycodes
     * @param {String} jurisdictionCode Optional jurisdiction code, get via the call to https://developer.trulioo.com/reference#getcountrysubdivisions
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/BusinessRegistrationNumber>} and HTTP response
     */
    getBusinessRegistrationNumbersWithHttpInfo(mode, countryCode, jurisdictionCode) {
      let postBody = null;
      // verify the required parameter 'mode' is set
      if (mode === undefined || mode === null) {
        throw new Error("Missing the required parameter 'mode' when calling getBusinessRegistrationNumbers");
      }
      // verify the required parameter 'countryCode' is set
      if (countryCode === undefined || countryCode === null) {
        throw new Error("Missing the required parameter 'countryCode' when calling getBusinessRegistrationNumbers");
      }
      // verify the required parameter 'jurisdictionCode' is set
      if (jurisdictionCode === undefined || jurisdictionCode === null) {
        throw new Error("Missing the required parameter 'jurisdictionCode' when calling getBusinessRegistrationNumbers");
      }

      let pathParams = {
        'mode': mode,
        'countryCode': countryCode,
        'jurisdictionCode': jurisdictionCode
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = [BusinessRegistrationNumber];
      return this.apiClient.callApi(
        '/{mode}/configuration/v1/businessregistrationnumbers/{countryCode}/{jurisdictionCode}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Business Registration Numbers
     * Gets the currently configured business registration numbers, for country and an optionally supplied jurisdiction
     * @param {String} mode trial or live
     * @param {String} countryCode Country alpha2 code, get via the call to https://developer.trulioo.com/reference#getcountrycodes
     * @param {String} jurisdictionCode Optional jurisdiction code, get via the call to https://developer.trulioo.com/reference#getcountrysubdivisions
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/BusinessRegistrationNumber>}
     */
    getBusinessRegistrationNumbers(mode, countryCode, jurisdictionCode) {
      return this.getBusinessRegistrationNumbersWithHttpInfo(mode, countryCode, jurisdictionCode)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Consents
     * This method retrieves the consents required for data sources currently configured in your account configuration.   The response for this method contains a collection of strings that Verify method's ConsentForDataSources field expects to perform a verification using those data sources.   A failure to provide an element from the string collection will lead to a <a class=\"link-to-api\" href=\"#errors\">1005</a> service error.
     * @param {String} mode trial or live
     * @param {String} configurationName The product configuration. Currently \"Identity Verification\" for all products.
     * @param {String} countryCode Call CountryCodes to get the countries available to you.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<String>} and HTTP response
     */
    getConsentsWithHttpInfo(mode, configurationName, countryCode) {
      let postBody = null;
      // verify the required parameter 'mode' is set
      if (mode === undefined || mode === null) {
        throw new Error("Missing the required parameter 'mode' when calling getConsents");
      }
      // verify the required parameter 'configurationName' is set
      if (configurationName === undefined || configurationName === null) {
        throw new Error("Missing the required parameter 'configurationName' when calling getConsents");
      }
      // verify the required parameter 'countryCode' is set
      if (countryCode === undefined || countryCode === null) {
        throw new Error("Missing the required parameter 'countryCode' when calling getConsents");
      }

      let pathParams = {
        'mode': mode,
        'configurationName': configurationName,
        'countryCode': countryCode
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/{mode}/configuration/v1/consents/{configurationName}/{countryCode}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Consents
     * This method retrieves the consents required for data sources currently configured in your account configuration.   The response for this method contains a collection of strings that Verify method's ConsentForDataSources field expects to perform a verification using those data sources.   A failure to provide an element from the string collection will lead to a <a class=\"link-to-api\" href=\"#errors\">1005</a> service error.
     * @param {String} mode trial or live
     * @param {String} configurationName The product configuration. Currently \"Identity Verification\" for all products.
     * @param {String} countryCode Call CountryCodes to get the countries available to you.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<String>}
     */
    getConsents(mode, configurationName, countryCode) {
      return this.getConsentsWithHttpInfo(mode, configurationName, countryCode)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Country Codes
     * This method retrieves all the countries that are available to perform a verification.
     * @param {String} mode trial or live
     * @param {String} configurationName The product configuration. Currently \"Identity Verification\" for all products.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<String>} and HTTP response
     */
    getCountryCodesWithHttpInfo(mode, configurationName) {
      let postBody = null;
      // verify the required parameter 'mode' is set
      if (mode === undefined || mode === null) {
        throw new Error("Missing the required parameter 'mode' when calling getCountryCodes");
      }
      // verify the required parameter 'configurationName' is set
      if (configurationName === undefined || configurationName === null) {
        throw new Error("Missing the required parameter 'configurationName' when calling getCountryCodes");
      }

      let pathParams = {
        'mode': mode,
        'configurationName': configurationName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/{mode}/configuration/v1/countrycodes/{configurationName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Country Codes
     * This method retrieves all the countries that are available to perform a verification.
     * @param {String} mode trial or live
     * @param {String} configurationName The product configuration. Currently \"Identity Verification\" for all products.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<String>}
     */
    getCountryCodes(mode, configurationName) {
      return this.getCountryCodesWithHttpInfo(mode, configurationName)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Country Subdivisions
     * Gets the provinces states or other subdivisions for a country, mostly matches ISO 3166-2
     * @param {String} mode trial or live
     * @param {String} countryCode Country alpha2 code, get the the call to countrycodes
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/CountrySubdivision>} and HTTP response
     */
    getCountrySubdivisionsWithHttpInfo(mode, countryCode) {
      let postBody = null;
      // verify the required parameter 'mode' is set
      if (mode === undefined || mode === null) {
        throw new Error("Missing the required parameter 'mode' when calling getCountrySubdivisions");
      }
      // verify the required parameter 'countryCode' is set
      if (countryCode === undefined || countryCode === null) {
        throw new Error("Missing the required parameter 'countryCode' when calling getCountrySubdivisions");
      }

      let pathParams = {
        'mode': mode,
        'countryCode': countryCode
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = [CountrySubdivision];
      return this.apiClient.callApi(
        '/{mode}/configuration/v1/countrysubdivisions/{countryCode}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Country Subdivisions
     * Gets the provinces states or other subdivisions for a country, mostly matches ISO 3166-2
     * @param {String} mode trial or live
     * @param {String} countryCode Country alpha2 code, get the the call to countrycodes
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/CountrySubdivision>}
     */
    getCountrySubdivisions(mode, countryCode) {
      return this.getCountrySubdivisionsWithHttpInfo(mode, countryCode)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Datasources
     * Gets datasource groups configured for your product and country.
     * @param {String} mode trial or live
     * @param {String} configurationName The product configuration. Currently \"Identity Verification\" for all products.
     * @param {String} countryCode Call CountryCodes to get the countries available to you.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/NormalizedDatasourceGroupCountry>} and HTTP response
     */
    getDatasourcesWithHttpInfo(mode, configurationName, countryCode) {
      let postBody = null;
      // verify the required parameter 'mode' is set
      if (mode === undefined || mode === null) {
        throw new Error("Missing the required parameter 'mode' when calling getDatasources");
      }
      // verify the required parameter 'configurationName' is set
      if (configurationName === undefined || configurationName === null) {
        throw new Error("Missing the required parameter 'configurationName' when calling getDatasources");
      }
      // verify the required parameter 'countryCode' is set
      if (countryCode === undefined || countryCode === null) {
        throw new Error("Missing the required parameter 'countryCode' when calling getDatasources");
      }

      let pathParams = {
        'mode': mode,
        'configurationName': configurationName,
        'countryCode': countryCode
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = [NormalizedDatasourceGroupCountry];
      return this.apiClient.callApi(
        '/{mode}/configuration/v1/datasources/{configurationName}/{countryCode}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Datasources
     * Gets datasource groups configured for your product and country.
     * @param {String} mode trial or live
     * @param {String} configurationName The product configuration. Currently \"Identity Verification\" for all products.
     * @param {String} countryCode Call CountryCodes to get the countries available to you.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/NormalizedDatasourceGroupCountry>}
     */
    getDatasources(mode, configurationName, countryCode) {
      return this.getDatasourcesWithHttpInfo(mode, configurationName, countryCode)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Detailed Consents
     * This method retrieves details about consents required for data sources currently configured in your account configuration.   The response for this method contains a collection of objects.  Each object contains the Name of the data source, Text outlining what the user is consenting to, and optionally a Url where the user can find more information about how their data will be used.    Failure to provide a Name from the object collection will lead to a <a class=\"link-to-api\" href=\"#errors\">1005</a> service error.
     * @param {String} mode trial or live
     * @param {String} configurationName The product configuration. Currently \"Identity Verification\" for all products.
     * @param {String} countryCode Call CountryCodes to get the countries available to you.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Consent>} and HTTP response
     */
    getDetailedConsentsWithHttpInfo(mode, configurationName, countryCode) {
      let postBody = null;
      // verify the required parameter 'mode' is set
      if (mode === undefined || mode === null) {
        throw new Error("Missing the required parameter 'mode' when calling getDetailedConsents");
      }
      // verify the required parameter 'configurationName' is set
      if (configurationName === undefined || configurationName === null) {
        throw new Error("Missing the required parameter 'configurationName' when calling getDetailedConsents");
      }
      // verify the required parameter 'countryCode' is set
      if (countryCode === undefined || countryCode === null) {
        throw new Error("Missing the required parameter 'countryCode' when calling getDetailedConsents");
      }

      let pathParams = {
        'mode': mode,
        'configurationName': configurationName,
        'countryCode': countryCode
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = [Consent];
      return this.apiClient.callApi(
        '/{mode}/configuration/v1/detailedConsents/{configurationName}/{countryCode}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Detailed Consents
     * This method retrieves details about consents required for data sources currently configured in your account configuration.   The response for this method contains a collection of objects.  Each object contains the Name of the data source, Text outlining what the user is consenting to, and optionally a Url where the user can find more information about how their data will be used.    Failure to provide a Name from the object collection will lead to a <a class=\"link-to-api\" href=\"#errors\">1005</a> service error.
     * @param {String} mode trial or live
     * @param {String} configurationName The product configuration. Currently \"Identity Verification\" for all products.
     * @param {String} countryCode Call CountryCodes to get the countries available to you.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Consent>}
     */
    getDetailedConsents(mode, configurationName, countryCode) {
      return this.getDetailedConsentsWithHttpInfo(mode, configurationName, countryCode)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Document Types
     * Gets the document types available for a country.
     * @param {String} mode trial or live
     * @param {String} countryCode Call CountryCodes to get the countries available to you.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object.<String, {String: [String]}>} and HTTP response
     */
    getDocumentTypesWithHttpInfo(mode, countryCode) {
      let postBody = null;
      // verify the required parameter 'mode' is set
      if (mode === undefined || mode === null) {
        throw new Error("Missing the required parameter 'mode' when calling getDocumentTypes");
      }
      // verify the required parameter 'countryCode' is set
      if (countryCode === undefined || countryCode === null) {
        throw new Error("Missing the required parameter 'countryCode' when calling getDocumentTypes");
      }

      let pathParams = {
        'mode': mode,
        'countryCode': countryCode
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = {'String': ['String']};
      return this.apiClient.callApi(
        '/{mode}/configuration/v1/documentTypes/{countryCode}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Document Types
     * Gets the document types available for a country.
     * @param {String} mode trial or live
     * @param {String} countryCode Call CountryCodes to get the countries available to you.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object.<String, {String: [String]}>}
     */
    getDocumentTypes(mode, countryCode) {
      return this.getDocumentTypesWithHttpInfo(mode, countryCode)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Fields
     * Generates json schema for the API, the schema is dynamic based on the country and configuration you are using.  http://json-schema.org/documentation.html
     * @param {String} mode trial or live
     * @param {String} configurationName The product configuration. Currently \"Identity Verification\" for all products.
     * @param {String} countryCode Call CountryCodes to get the countries available to you.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    getFieldsWithHttpInfo(mode, configurationName, countryCode) {
      let postBody = null;
      // verify the required parameter 'mode' is set
      if (mode === undefined || mode === null) {
        throw new Error("Missing the required parameter 'mode' when calling getFields");
      }
      // verify the required parameter 'configurationName' is set
      if (configurationName === undefined || configurationName === null) {
        throw new Error("Missing the required parameter 'configurationName' when calling getFields");
      }
      // verify the required parameter 'countryCode' is set
      if (countryCode === undefined || countryCode === null) {
        throw new Error("Missing the required parameter 'countryCode' when calling getFields");
      }

      let pathParams = {
        'mode': mode,
        'configurationName': configurationName,
        'countryCode': countryCode
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/{mode}/configuration/v1/fields/{configurationName}/{countryCode}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Fields
     * Generates json schema for the API, the schema is dynamic based on the country and configuration you are using.  http://json-schema.org/documentation.html
     * @param {String} mode trial or live
     * @param {String} configurationName The product configuration. Currently \"Identity Verification\" for all products.
     * @param {String} countryCode Call CountryCodes to get the countries available to you.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    getFields(mode, configurationName, countryCode) {
      return this.getFieldsWithHttpInfo(mode, configurationName, countryCode)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Recommended Fields
     * Generates json schema for the API, the schema is dynamic based on the recommendedFields country and account you are using.  http://json-schema.org/documentation.html
     * @param {String} mode trial or live
     * @param {String} configurationName The product configuration. Currently \"Identity Verification\" for all products.
     * @param {String} countryCode Call CountryCodes to get the countries available to you.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    getRecommendedFieldsWithHttpInfo(mode, configurationName, countryCode) {
      let postBody = null;
      // verify the required parameter 'mode' is set
      if (mode === undefined || mode === null) {
        throw new Error("Missing the required parameter 'mode' when calling getRecommendedFields");
      }
      // verify the required parameter 'configurationName' is set
      if (configurationName === undefined || configurationName === null) {
        throw new Error("Missing the required parameter 'configurationName' when calling getRecommendedFields");
      }
      // verify the required parameter 'countryCode' is set
      if (countryCode === undefined || countryCode === null) {
        throw new Error("Missing the required parameter 'countryCode' when calling getRecommendedFields");
      }

      let pathParams = {
        'mode': mode,
        'configurationName': configurationName,
        'countryCode': countryCode
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/{mode}/configuration/v1/recommendedfields/{configurationName}/{countryCode}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Recommended Fields
     * Generates json schema for the API, the schema is dynamic based on the recommendedFields country and account you are using.  http://json-schema.org/documentation.html
     * @param {String} mode trial or live
     * @param {String} configurationName The product configuration. Currently \"Identity Verification\" for all products.
     * @param {String} countryCode Call CountryCodes to get the countries available to you.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    getRecommendedFields(mode, configurationName, countryCode) {
      return this.getRecommendedFieldsWithHttpInfo(mode, configurationName, countryCode)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Test Entities
     * Gets the test entities configured for your product and country.
     * @param {String} mode trial or live
     * @param {String} configurationName The product configuration. Currently \"Identity Verification\" for all products.
     * @param {String} countryCode Call CountryCodes to get the countries available to you.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/TestEntityDataFields>} and HTTP response
     */
    getTestEntitiesWithHttpInfo(mode, configurationName, countryCode) {
      let postBody = null;
      // verify the required parameter 'mode' is set
      if (mode === undefined || mode === null) {
        throw new Error("Missing the required parameter 'mode' when calling getTestEntities");
      }
      // verify the required parameter 'configurationName' is set
      if (configurationName === undefined || configurationName === null) {
        throw new Error("Missing the required parameter 'configurationName' when calling getTestEntities");
      }
      // verify the required parameter 'countryCode' is set
      if (countryCode === undefined || countryCode === null) {
        throw new Error("Missing the required parameter 'countryCode' when calling getTestEntities");
      }

      let pathParams = {
        'mode': mode,
        'configurationName': configurationName,
        'countryCode': countryCode
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = [TestEntityDataFields];
      return this.apiClient.callApi(
        '/{mode}/configuration/v1/testentities/{configurationName}/{countryCode}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Test Entities
     * Gets the test entities configured for your product and country.
     * @param {String} mode trial or live
     * @param {String} configurationName The product configuration. Currently \"Identity Verification\" for all products.
     * @param {String} countryCode Call CountryCodes to get the countries available to you.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/TestEntityDataFields>}
     */
    getTestEntities(mode, configurationName, countryCode) {
      return this.getTestEntitiesWithHttpInfo(mode, configurationName, countryCode)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
