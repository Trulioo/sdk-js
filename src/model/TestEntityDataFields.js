/**
 * Trulioo JavaScript SDK
 *
 * Package version: 1.0.3
 * Trulioo OpenAPI version: v1
 * Generated by OpenAPI Generator version: 5.0.1
 */
import ApiClient from '../ApiClient';
import Business from './Business';
import Communication from './Communication';
import Document from './Document';
import DriverLicence from './DriverLicence';
import Location from './Location';
import NationalId from './NationalId';
import Passport from './Passport';
import PersonInfo from './PersonInfo';

/**
 * The TestEntityDataFields model module.
 * @module model/TestEntityDataFields
 * @version v1
 */
class TestEntityDataFields {
    /**
     * Constructs a new <code>TestEntityDataFields</code>.
     * @alias module:model/TestEntityDataFields
     */
    constructor() { 
        
        TestEntityDataFields.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TestEntityDataFields</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TestEntityDataFields} obj Optional instance to populate.
     * @return {module:model/TestEntityDataFields} The populated <code>TestEntityDataFields</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TestEntityDataFields();

            if (data.hasOwnProperty('TestEntityName')) {
                obj['TestEntityName'] = ApiClient.convertToType(data['TestEntityName'], 'String');
            }
            if (data.hasOwnProperty('PersonInfo')) {
                obj['PersonInfo'] = PersonInfo.constructFromObject(data['PersonInfo']);
            }
            if (data.hasOwnProperty('Location')) {
                obj['Location'] = Location.constructFromObject(data['Location']);
            }
            if (data.hasOwnProperty('Communication')) {
                obj['Communication'] = Communication.constructFromObject(data['Communication']);
            }
            if (data.hasOwnProperty('DriverLicence')) {
                obj['DriverLicence'] = DriverLicence.constructFromObject(data['DriverLicence']);
            }
            if (data.hasOwnProperty('NationalIds')) {
                obj['NationalIds'] = ApiClient.convertToType(data['NationalIds'], [NationalId]);
            }
            if (data.hasOwnProperty('Passport')) {
                obj['Passport'] = Passport.constructFromObject(data['Passport']);
            }
            if (data.hasOwnProperty('Document')) {
                obj['Document'] = Document.constructFromObject(data['Document']);
            }
            if (data.hasOwnProperty('Business')) {
                obj['Business'] = Business.constructFromObject(data['Business']);
            }
            if (data.hasOwnProperty('CountrySpecific')) {
                obj['CountrySpecific'] = ApiClient.convertToType(data['CountrySpecific'], {'String': {'String': 'String'}});
            }
        }
        return obj;
    }


}

/**
 * Friendly name for the test entity
 * @member {String} TestEntityName
 */
TestEntityDataFields.prototype['TestEntityName'] = undefined;

/**
 * @member {module:model/PersonInfo} PersonInfo
 */
TestEntityDataFields.prototype['PersonInfo'] = undefined;

/**
 * @member {module:model/Location} Location
 */
TestEntityDataFields.prototype['Location'] = undefined;

/**
 * @member {module:model/Communication} Communication
 */
TestEntityDataFields.prototype['Communication'] = undefined;

/**
 * @member {module:model/DriverLicence} DriverLicence
 */
TestEntityDataFields.prototype['DriverLicence'] = undefined;

/**
 * National Identification Information
 * @member {Array.<module:model/NationalId>} NationalIds
 */
TestEntityDataFields.prototype['NationalIds'] = undefined;

/**
 * @member {module:model/Passport} Passport
 */
TestEntityDataFields.prototype['Passport'] = undefined;

/**
 * @member {module:model/Document} Document
 */
TestEntityDataFields.prototype['Document'] = undefined;

/**
 * @member {module:model/Business} Business
 */
TestEntityDataFields.prototype['Business'] = undefined;

/**
 * CountrySpecific fields  {\"CountryCode\" : {\"Field1\" : \"Value\",  \"Field2\" : \"Value\"  }}
 * @member {Object.<String, Object.<String, String>>} CountrySpecific
 */
TestEntityDataFields.prototype['CountrySpecific'] = undefined;






export default TestEntityDataFields;

